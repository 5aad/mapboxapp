{"version":3,"sources":["MapBox/MapboxAPIkey.js","MapBox/Map.js","App.js","serviceWorker.js","index.js"],"names":["MAPBOX_KEY","process","REACT_APP_API_KEY","mapboxgl","accessToken","Map","props","handleIncrement","zo","parseFloat","state","zoom","setState","handleDecrement","handleStyle","e","mapStyle","target","value","lng","lat","bind","console","log","map","container","this","mapContainer","style","center","on","getCenter","toFixed","getZoom","nextProps","nextState","className","role","aria-label","type","onClick","ref","el","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.67629485.chunk.js","sourcesContent":["export const  MAPBOX_KEY = process.env.REACT_APP_API_KEY;","import React from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"./size.css\";\r\nimport { MAPBOX_KEY } from \"./MapboxAPIkey\";\r\n\r\nmapboxgl.accessToken = MAPBOX_KEY;\r\nclass Map extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        lng: 5,\r\n        lat: 34,\r\n        zoom: 2,\r\n        //is ki state change karni hai \r\n    \r\n        mapStyle:\"streets-v11\"\r\n        };\r\n        this.handleStyle=this.handleStyle.bind(this)\r\n        }\r\n        handleIncrement=()=>{\r\n          let zo = parseFloat(this.state.zoom)\r\n          \r\n          if(zo<parseFloat(22))\r\n              this.setState({\r\n                zoom:zo+parseFloat(1)\r\n              })\r\n        }\r\n        handleDecrement=()=>{\r\n          let zo = parseFloat(this.state.zoom)\r\n          if(zo>parseFloat(2))\r\n              this.setState({\r\n                zoom:zo-parseFloat(1)\r\n              })\r\n        }\r\n        \r\n    \r\n        componentDidUpdate() {\r\n          console.log('update')\r\n        const map = new mapboxgl.Map({\r\n        container: this.mapContainer,\r\n        //satellite-v9\r\n        //light-v10\r\n        style: ('mapbox://styles/mapbox/'+ this.state.mapStyle),\r\n        center: [this.state.lng, this.state.lat],\r\n        zoom: this.state.zoom\r\n        });\r\n         \r\n        map.on('move', () => {\r\n        this.setState({\r\n        lng: map.getCenter().lng.toFixed(4),\r\n        lat: map.getCenter().lat.toFixed(4),\r\n        zoom: map.getZoom().toFixed(2)\r\n        });\r\n        });\r\n        }\r\n        \r\n        shouldComponentUpdate(nextProps,nextState){\r\n          \r\n          if( nextState.zoom!==this.state.zoom)\r\n              return true\r\n          if(nextState.mapStyle!==this.state.mapStyle){\r\n            return true\r\n          }\r\n          return false\r\n        }\r\n        componentDidMount(){\r\n          const map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            //satellite-v9\r\n            //light-v10\r\n            style: ('mapbox://styles/mapbox/'+ this.state.mapStyle),\r\n            center: [this.state.lng, this.state.lat],\r\n            zoom: this.state.zoom\r\n            });\r\n             \r\n            map.on('move', () => {\r\n            this.setState({\r\n            lng: map.getCenter().lng.toFixed(4),\r\n            lat: map.getCenter().lat.toFixed(4),\r\n            zoom: map.getZoom().toFixed(2)\r\n            });\r\n            });\r\n        }\r\n     \r\n        handleStyle=(e)=>{\r\n            this.setState({\r\n              mapStyle:e.target.value\r\n            })\r\n           \r\n        }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"sidebarStyle\">\r\n          <div>\r\n            Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom:{\" \"}\r\n            {this.state.zoom}\r\n          </div>\r\n        </div>\r\n        <div className=\"buttonStyle\">\r\n          <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n          <button   type=\"button\" className=\"btn btn-secondary\" value=\"streets-v11\" onClick={(e)=>{this.handleStyle(e)}}>streets</button>\r\n      <button  type=\"button\" className=\"btn btn-secondary\" value=\"satellite-v9\" onClick={(e)=>this.handleStyle(e)}>satellite</button>\r\n      <button   type=\"button\" className=\"btn btn-secondary\" value=\"light-v10\" onClick={(e)=>this.handleStyle(e)}>Light</button>\r\n      <button  type=\"button\" className=\"btn btn-secondary\" onClick={this.handleIncrement}> +</button>\r\n      <button   type=\"button\" className=\"btn btn-secondary\" onClick={this.handleDecrement}> -</button>\r\n          </div>\r\n        </div>\r\n        <div ref={(el) => (this.mapContainer = el)} className=\"mapContainer\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\nimport Map from \"./MapBox/Map\"\n\nclass App extends React.Component {\n \n  render() {\n    return (\n      <div>\n        <Map/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}