{"version":3,"sources":["MapBox/Firebase.js","MapBox/Map.js","MapBox/MapboxAPIkey.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","mapboxgl","accessToken","Map","props","mapRef","React","createRef","setstyl","style","state","mapStyle","map","setStyle","handleStyle","e","setState","target","value","handleCollName","console","log","colName","split","docName","collName","buttonClick","unsubscribe","lng","lat","zoom","data","bind","this","collectionName","mapMarker","i","length","remove","firestore","collection","doc","get","then","exists","markers","m","features","forEach","marker","c","properties","CreateDate","o","OpenDate","Marker","setLngLat","geometry","coordinates","setPopup","Popup","offset","setHTML","Id","Name","OpenStat","MaxJoinNum","MinJoinNum","moment","toDate","toDateString","addTo","push","catch","error","container","mapContainer","center","nav","NavigationControl","addControl","className","role","aria-label","type","onClick","ref","el","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0ef2dd52.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\n// import firestore from 'firebase/firestore'\r\n\r\n\r\n\r\nconst config = {\r\n  // this is your firebase config\r\n  // apiKey: \"AIzaSyBDwvi1GGn8LiAxcCHEXeXw4k5Wz_8G25U\",\r\n  // authDomain: \"test-zero-1.firebaseapp.com\",\r\n  // databaseURL: \"https://test-zero-1.firebaseio.com\",\r\n  // projectId: \"test-zero-1\",\r\n  // storageBucket: \"test-zero-1.appspot.com\",\r\n  // messagingSenderId: \"344331762008\",\r\n  // appId: \"1:344331762008:web:2733af00957bfa6f864d2d\",\r\n  // measurementId: \"G-9NT1LE2Q07\"\r\n  \r\n    apiKey: \"AIzaSyAWCoub6quvjEY-I4sAO3hcTlBEAfaDcc8\",\r\n    authDomain: \"app-6d62c.firebaseapp.com\",\r\n    databaseURL: \"https://app-6d62c.firebaseio.com\",\r\n    projectId: \"app-6d62c\",\r\n    storageBucket: \"app-6d62c.appspot.com\",\r\n    messagingSenderId: \"1075551474912\",\r\n    appId: \"1:1075551474912:web:776b6d2da0cf2d8392ac85\",\r\n    measurementId: \"G-8V8W0JLNRE\"\r\n  };\r\n  firebase.initializeApp(config);\r\n  \r\n\r\n  \r\n  export default firebase;","import React from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"./size.css\";\r\nimport firebase from \"./Firebase\";\r\nimport moment from \"moment\";\r\n// import ReactDOM from \"react-dom\";\r\nimport { MAPBOX_KEY } from \"./MapboxAPIkey\";\r\n\r\nmapboxgl.accessToken = MAPBOX_KEY;\r\n\r\n// const el = document.createElement(\"div\");\r\n// el.className = \"marker\";\r\n// ReactDOM.render(<div className=\"marker\" />, el);\r\n\r\nclass Map extends React.Component {\r\n  mapRef = React.createRef();\r\n  map;mapMarker;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.unsubscribe = null;\r\n    this.state = {\r\n      buttonClick:false,\r\n      lng: 5,\r\n      lat: 34,\r\n      zoom: 2,\r\n      mapStyle: \"streets-v11\",\r\n      data: null,\r\n      collName: \"youtubeLinks\",\r\n      docName: \"IjNLTwdUDVxPafFFRABO\",\r\n    };\r\n    this.handleStyle = this.handleStyle.bind(this);\r\n    this.handleCollName = this.handleCollName.bind(this);\r\n  }\r\n\r\n  async componentDidUpdate() {\r\n    this.setstyl();\r\n    if(this.state.buttonClick===true){\r\n      this.setState({\r\n        buttonClick:false\r\n      })\r\n      console.log(\"CDidM\",this.state.collName,this.state.docName)\r\n      const collectionName = this.state.collName;\r\n      const docName = this.state.docName;\r\n     \r\n      \r\n      console.log(this.mapMarker)\r\n      //this.mapMarker.remove()\r\n       // this.mapMarker.remove()\r\n       if (this.mapMarker!==null) {\r\n        for (var i = this.mapMarker.length - 1; i >= 0; i--) {\r\n          this.mapMarker[i].remove();\r\n        }\r\n    }\r\n        firebase\r\n        .firestore()\r\n        .collection(collectionName) //GeoData your collection name IjNLTwdUDVxPafFFRABO\r\n        .doc(docName) //b3f71fd0-9687-11ea-8845-ab92e09d1e9d & 17305fa096b3-11a-b477-03342e794c0b your document ID\r\n        .get()\r\n        .then((doc) => {\r\n          if (doc.exists) {\r\n            let data = doc.data();\r\n            console.log()\r\n            this.setState({ data: data });\r\n            console.log(\"Document data:\", this.state.data);\r\n            let markers;\r\n            let m=[]\r\n            data.features.forEach((marker) => {\r\n            \r\n              const c = marker.properties.CreateDate;\r\n              const o = marker.properties.OpenDate;\r\n              // console.log(\"Doc:\", moment(o, \"YYYYMMDD\").toDate().toDateString());\r\n             markers= new mapboxgl.Marker(this.mapMarker)\r\n                .setLngLat(marker.geometry.coordinates)\r\n                .setPopup(\r\n                  new mapboxgl.Popup({ offset: 25 }) // add popups\r\n                    .setHTML(\r\n                      \"<p>\" +\r\n                        marker.properties.Id +\r\n                        \"</p>\" +\r\n                        \"<p>\" +\r\n                        marker.properties.Name +\r\n                        \"</p>\" +\r\n                        \"<p>\" +\r\n                        marker.properties.OpenStat +\r\n                        \"</p>\" +\r\n                        \"<p>\" +\r\n                        marker.properties.MaxJoinNum +\r\n                        \"</p>\" +\r\n                        \"<p>\" +\r\n                        marker.properties.MinJoinNum +\r\n                        \"</p>\" +\r\n                        \"<p>\" +\r\n                        moment(c, \"YYYYMMDD\").toDate().toDateString() +\r\n                        \"</p>\" +\r\n                        \"<p>\" +\r\n                        moment(o, \"YYYYMMDD\").toDate().toDateString() +\r\n                        \"</p>\"\r\n                    )\r\n                )\r\n                .addTo(this.map);\r\n                m.push(markers)\r\n                \r\n            });\r\n           this.mapMarker=m\r\n          } else {\r\n            // doc.data() will be undefined in this case\r\n            this.setState({ data: null });\r\n            console.log(\"No such document!\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          this.setState({ data: null });\r\n          console.log(\"Error getting document:\", error);\r\n        });\r\n      \r\n    }\r\n  }\r\n  setstyl = () => {\r\n    const style = this.state.mapStyle;\r\n    // console.log(style);\r\n    this.map.setStyle(\"mapbox://styles/mapbox/\" + style);\r\n  };\r\n\r\n\r\n  async componentDidMount() {\r\n\r\n    console.log(\"CDidM\",this.state.collName)\r\n    \r\n    const collectionName = this.state.collName;\r\n    const docName = this.state.docName;\r\n    firebase\r\n      .firestore()\r\n      .collection(collectionName) //GeoData your collection name IjNLTwdUDVxPafFFRABO\r\n      .doc(docName) //b3f71fd0-9687-11ea-8845-ab92e09d1e9d & 17305fa096b3-11a-b477-03342e794c0b your document ID\r\n      .get()\r\n      .then((doc) => {\r\n        if (doc.exists) {\r\n          let data = doc.data();\r\n\r\n          this.setState({ data: data });\r\n          console.log(\"Document data:\", this.state.data);\r\n          let markers;\r\n          let m=[]\r\n          this.state.data.features.forEach((marker) => {\r\n            const c = marker.properties.CreateDate;\r\n            const o = marker.properties.OpenDate;\r\n            // console.log(\"Doc:\", moment(o, \"YYYYMMDD\").toDate().toDateString());\r\n            markers=new mapboxgl.Marker(this.mapMarker)\r\n              .setLngLat(marker.geometry.coordinates)\r\n              .setPopup(\r\n                new mapboxgl.Popup({ offset: 25 }) // add popups\r\n                  .setHTML(\r\n                    \"<p>\" +\r\n                      marker.properties.Id +\r\n                      \"</p>\" +\r\n                      \"<p>\" +\r\n                      marker.properties.Name +\r\n                      \"</p>\" +\r\n                      \"<p>\" +\r\n                      marker.properties.OpenStat +\r\n                      \"</p>\" +\r\n                      \"<p>\" +\r\n                      marker.properties.MaxJoinNum +\r\n                      \"</p>\" +\r\n                      \"<p>\" +\r\n                      marker.properties.MinJoinNum +\r\n                      \"</p>\" +\r\n                      \"<p>\" +\r\n                      moment(c, \"YYYYMMDD\").toDate().toDateString() +\r\n                      \"</p>\" +\r\n                      \"<p>\" +\r\n                      moment(o, \"YYYYMMDD\").toDate().toDateString() +\r\n                      \"</p>\"\r\n                  )\r\n              )\r\n              .addTo(this.map);\r\n              m.push(markers)\r\n              \r\n          });\r\n         this.mapMarker=m\r\n        } else {\r\n          // doc.data() will be undefined in this case\r\n          this.setState({ data: null });\r\n          console.log(\"No such document!\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ data: null });\r\n        console.log(\"Error getting document:\", error);\r\n      });\r\n    \r\n\r\n    this.map = new mapboxgl.Map({\r\n      container: this.mapContainer,\r\n      //satellite-v9\r\n      //light-v10\r\n      style: \"mapbox://styles/mapbox/\" + this.state.mapStyle,\r\n      center: [this.state.lng, this.state.lat],\r\n      zoom: this.state.zoom,\r\n    });\r\n\r\n    const nav = new mapboxgl.NavigationControl();\r\n    this.map.addControl(nav);\r\n\r\n    this.setstyl();\r\n  }\r\n\r\n  handleStyle = (e) => {\r\n    this.setState({\r\n      mapStyle: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleCollName = (e) => {\r\n    console.log(\"e.target\",e.target.value);\r\n    const colName = e.target.value.split('/')[0]\r\n    const docName = e.target.value.split('/')[1]\r\n    this.setState({\r\n      collName: colName,\r\n      docName: docName,\r\n      buttonClick:true\r\n    });\r\n  };\r\n\r\n\r\n\r\n  render() {\r\n    console.log(\"render\",this.state.collName)\r\n    return (\r\n      <div>\r\n        <div className=\"buttonStyle\">\r\n          <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              value=\"streets-v11\"\r\n              onClick={(e) => {\r\n                this.handleStyle(e);\r\n              }}\r\n            >\r\n              streets\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              value=\"satellite-v9\"\r\n              onClick={(e) => this.handleStyle(e)}\r\n            >\r\n              satellite\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              value=\"light-v10\"\r\n              onClick={(e) => this.handleStyle(e)}\r\n            >\r\n              Light\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              value=\"anotherPins/gfXLsVKg0v4gK6R4JUZ8\"\r\n              onClick={(e) => this.handleCollName(e)}\r\n            >\r\n              new pin\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              value=\"youtubeLinks/IjNLTwdUDVxPafFFRABO\"\r\n              onClick={(e) => this.handleCollName(e)}\r\n            >\r\n              previous pins\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {/* <div ref={(el) => (this.mapMarker = el)} className=\"marker\" /> */}\r\n        <div ref={(el) => (this.mapContainer = el)} className=\"mapContainer\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;","export const  MAPBOX_KEY = \"pk.eyJ1IjoiNWFhZCIsImEiOiJjazlqeGo4YzUwMnhoM2pxYWQ3Z3gyMW1vIn0.FVlTmXS_ksLqzGwz9VTCdQ\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Map from './MapBox/Map';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Map />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}